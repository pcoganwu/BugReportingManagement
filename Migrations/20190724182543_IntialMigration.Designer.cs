// <auto-generated />
using System;
using BugReportingManagement.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BugReportingManagement.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20190724182543_IntialMigration")]
    partial class IntialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BugReportingManagement.Models.BugPriorities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BugPriorityType")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("BugPriorities");
                });

            modelBuilder.Entity("BugReportingManagement.Models.BugStatuses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BugStatusType")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("BugStatuses");
                });

            modelBuilder.Entity("BugReportingManagement.Models.Bugs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Attachment");

                    b.Property<string>("BugClosedBy")
                        .IsRequired();

                    b.Property<DateTime>("BugClosedOn");

                    b.Property<string>("BugCreatedBy")
                        .IsRequired();

                    b.Property<DateTime>("BugCreatedOn");

                    b.Property<int>("BugPriorityId");

                    b.Property<string>("BugResolutionSummary")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int>("BugStatusId");

                    b.Property<int>("ProjectId");

                    b.HasKey("Id");

                    b.HasIndex("BugPriorityId");

                    b.HasIndex("BugStatusId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Bugs");
                });

            modelBuilder.Entity("BugReportingManagement.Models.Locations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("TesterId");

                    b.HasKey("Id");

                    b.HasIndex("TesterId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("BugReportingManagement.Models.ProjectAdmins", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConfirmPassword")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("ProjectAdmins");
                });

            modelBuilder.Entity("BugReportingManagement.Models.Projects", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<DateTime>("ModifiedOn");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("BugReportingManagement.Models.Testers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<int>("ProjectId");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Testers");
                });

            modelBuilder.Entity("BugReportingManagement.Models.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConfirmPassword")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<string>("Phone")
                        .IsRequired();

                    b.Property<int>("ProjectId");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BugReportingManagement.Models.Bugs", b =>
                {
                    b.HasOne("BugReportingManagement.Models.BugPriorities", "BugPriority")
                        .WithMany("Bugs")
                        .HasForeignKey("BugPriorityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BugReportingManagement.Models.BugStatuses", "BugStatus")
                        .WithMany("Bugs")
                        .HasForeignKey("BugStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BugReportingManagement.Models.Projects", "Project")
                        .WithMany("Bugs")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BugReportingManagement.Models.Locations", b =>
                {
                    b.HasOne("BugReportingManagement.Models.Testers", "Tester")
                        .WithMany("Locations")
                        .HasForeignKey("TesterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BugReportingManagement.Models.Testers", b =>
                {
                    b.HasOne("BugReportingManagement.Models.Projects", "Project")
                        .WithMany("Testers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BugReportingManagement.Models.Users", b =>
                {
                    b.HasOne("BugReportingManagement.Models.Projects", "Project")
                        .WithMany("Users")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
